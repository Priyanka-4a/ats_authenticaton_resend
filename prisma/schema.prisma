// Define your data source
datasource db {
  provider = "postgresql" // PostgreSQL database
  url      = env("DATABASE_URL") // Ensure this matches your .env file
}

// Generate Prisma Client
generator client {
  provider = "prisma-client-js"
}

// Define the User model required for NextAuth
model User {
  id            String    @id @default(uuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  sessions      Session[]
  accounts      Account[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

// Define the Account model required for NextAuth
model Account {
  id                String  @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId])
}

// Define the Session model required for NextAuth
model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id])
}

// Define the VerificationToken model required for NextAuth
model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Define the Candidate model
model Candidate {
  id        Int         @id @default(autoincrement())
  name      String
  createdAt DateTime    @default(now())
  
  resumes   Resume[]     // Back relation to Resume
  atsScores ATS_Score[]  // Back relation to ATS_Score
}

// Define the Resume model
model Resume {
  id                  Int         @id @default(autoincrement())
  Resumefilename      String
  ResumefileUrl       String
  uploadedAt          DateTime    @default(now())
  JobDescriptionfileUrl String
  candidateId         Int
  candidate           Candidate   @relation(fields: [candidateId], references: [id])
  
  atsScores           ATS_Score[] // Back relation to ATS_Score
}

// Define the ATS_Score model
model ATS_Score {
  id          Int       @id @default(autoincrement())
  score       Int
  summary     String
  createdAt   DateTime  @default(now())
  candidateId Int
  candidate   Candidate @relation(fields: [candidateId], references: [id])
  resumeId    Int
  resume      Resume    @relation(fields: [resumeId], references: [id])
}
